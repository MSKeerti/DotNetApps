// <auto-generated />
using System;
using LabDal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabDal.Migrations
{
    [DbContext(typeof(LabDbContext))]
    partial class LabDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LabDal.ManyCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ManyCourses");
                });

            modelBuilder.Entity("LabDal.OneCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToManyStudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToManyStudentId");

                    b.ToTable("OneCourses");
                });

            modelBuilder.Entity("LabDal.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ManyCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManyCourseId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LabDal.ToManyStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ToManyStudents");
                });

            modelBuilder.Entity("LabDal.ToOneCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RelatedToOneStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ToOneCompanies");
                });

            modelBuilder.Entity("LabDal.OneCourse", b =>
                {
                    b.HasOne("LabDal.ToManyStudent", null)
                        .WithMany("OneCourses")
                        .HasForeignKey("ToManyStudentId");
                });

            modelBuilder.Entity("LabDal.Student", b =>
                {
                    b.HasOne("LabDal.ManyCourse", null)
                        .WithMany("Students")
                        .HasForeignKey("ManyCourseId");
                });

            modelBuilder.Entity("LabDal.ManyCourse", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("LabDal.ToManyStudent", b =>
                {
                    b.Navigation("OneCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
